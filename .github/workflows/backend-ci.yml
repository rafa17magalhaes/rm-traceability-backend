name: Backend CI/CD

# Dispara em push ou PR para as branches develop e main
on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:

  # 1) Build, lint e test
  build-and-test:
    name: ðŸ›  Build, Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

      - name: Run tests
        run: yarn test:cov

  # 2) Deploy via SSH (rebuild localmente no servidor)
  deploy:
    name: ðŸš€ Deploy to VPS
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      # carrega chave privada
      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # copia o docker-compose (e quaisquer outros arquivos que queira) pro servidor
      - name: Copy docker-compose.yml
        run: |
          scp -P ${{ secrets.SSH_PORT }} docker-compose.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/rm_traceability_back/

      # conecta por SSH e executa o rebuild + up
      - name: SSH & Deploy
        run: |
          ssh -p ${{ secrets.SSH_PORT }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
              cd ~/rm_traceability_back
              # --build forÃ§a rebuild da imagem local via Dockerfile (ou Dockerfile.dev, conforme seu compose)
              docker-compose up -d --build app
            EOF
